(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'manages'"
p3
sS'layer'
p4
S'/home/sanu/web2py/applications/app2/models/menu.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Customize your APP title, subtitle and menus here\n# ----------------------------------------------------------------------------------------------------------------------\n\nresponse.logo = A(B(\'My Blog\'), XML(\'&nbsp;\'),\n                  _class="navbar-brand", _href="index",\n                  _id="web2py-logo")\nresponse.title = request.application.replace(\'_\', \' \').title()\nresponse.subtitle = \'\'\n\n# ----------------------------------------------------------------------------------------------------------------------\n# read more at http://dev.w3.org/html5/markup/meta.name.html\n# ----------------------------------------------------------------------------------------------------------------------\nresponse.meta.author = myconf.get(\'app.author\')\nresponse.meta.description = myconf.get(\'app.description\')\nresponse.meta.keywords = myconf.get(\'app.keywords\')\nresponse.meta.generator = myconf.get(\'app.generator\')\n\n# ----------------------------------------------------------------------------------------------------------------------\n# your http://google.com/analytics id\n# ----------------------------------------------------------------------------------------------------------------------\nresponse.google_analytics_id = None\n\n# ----------------------------------------------------------------------------------------------------------------------\n# this is the main application menu add/remove items as required\n# ----------------------------------------------------------------------------------------------------------------------\n\nresponse.menu = [\n    (T(\'Post\'), False, URL(\'default\', \'index\')),\n    (T(\'Create Post\'), False, URL(\'default\', \'create\')),\n]\n\nif auth.has_membership(2, \'manages\'):\n    response.menu.append((T(\'Manage Post\'), False, URL(\'default\', \'manage\')))\n\nif "auth" in locals():\n    auth.wikimenu()\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/sanu/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/sanu/web2py/applications/app2/models/menu.py", line 36, in <module>\n    if auth.has_membership(2, \'manages\'):\n  File "/home/sanu/web2py/gluon/tools.py", line 4365, in has_membership\n    (membership.group_id == group_id)).select():\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 767, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1442, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'manages\'\n'
p11
s.