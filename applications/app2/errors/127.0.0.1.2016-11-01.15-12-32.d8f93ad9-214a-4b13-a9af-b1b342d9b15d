(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: '_'"
p3
sS'layer'
p4
S'/home/sanu/web2py/applications/app2/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\ndef index():  \n    rows = db(db.blog_post).select(orderby=db.blog_post.title.upper())\n    return locals()\n\n\n@auth.requires_login()    \ndef create():\n    form = SQLFORM(db.blog_post).process()\n    if form.accepted:\n        session.flash = "Blog is Posted"\n        redirect(URL(\'index\'))\n    return locals()\n\n@auth.requires_login()\ndef show():\n    post = db.blog_post(request.args(0, cast=int))\n    db.blog_comment.blog_post.default = post.id\n    db.blog_comment.blog_post.readable = False\n    db.blog_comment.blog_post.writable = False\n    form = SQLFORM(db.blog_comment).process()\n    comments = db(db.blog_comment.blog_post==post.id).select()\n    return locals()\n\n@auth.requires_membership(\'managers\')\ndef manage():\n    grid = SQLFORM.grid(db.blog_post)\n    return locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef test():\n    form = SQLFORM(db.test).process()\n    if form.accepted:\n        session.flash = "Blog is Posted"\n        redirect(URL(\'index\'))\n    return locals()\n\n\n@request.restful()\ndef api():\n    response.view = \'generic.\'+request.extension\n    def GET(*args,**vars):\n        patterns = \'auto\'\n        parser = db.parse_as_rest(patterns,args,vars)\n        if parser.status == 200:\n            return dict(content=parser.response)\n        else:\n            raise HTTP(parser.status,parser.error)\n    def POST(table_name,**vars):\n        return db[table_name].validate_and_insert(**vars)\n    def PUT(table_name,record_id,**vars):\n        return db(db[table_name]._id==record_id).update(**vars)\n    def DELETE(table_name,record_id):\n        return db(db[table_name]._id==record_id).delete()\n    return dict(GET=GET, POST=POST, PUT=PUT, DELETE=DELETE)\n\n\nresponse._vars=response._caller(api)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/sanu/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/sanu/web2py/applications/app2/controllers/default.py", line 102, in <module>\n  File "/home/sanu/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/sanu/web2py/gluon/globals.py", line 380, in f\n    res = rest_action(*request.args, **request.vars)\n  File "/home/sanu/web2py/applications/app2/controllers/default.py", line 88, in GET\n    parser = db.parse_as_rest(patterns,args,vars)\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/base.py", line 758, in parse_as_rest\n    items =  dbset.select(db[table][field], distinct=distinct, limitby=limits)\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/home/sanu/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1435, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'_\'\n'
p11
s.